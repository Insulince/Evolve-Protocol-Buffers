syntax = "proto3";
package evolve;
option go_package = "pb";

////////// MODELS //////////

message CreatureMessage {
    string name = 1;
    int64 generation = 2;
    double speed = 3;
    double stamina = 4;
    double health = 5;
    double greed = 6;
    double fitnessValue = 7;
    bool simulatedThisGeneration = 8;
    string outcome = 9;
    bool naturallySelectedThisGeneration = 10;
}

////////// SERVICES //////////

// Creature Service
service CreatureService {
    rpc GenerateCreatureRpc (GenerateCreatureRpcRequest) returns (GenerateCreatureRpcResponse);
    rpc GenerateCreaturesRpc (GenerateCreaturesRpcRequest) returns (GenerateCreaturesRpcResponse);
    rpc SimulateCreatureRpc (SimulateCreatureRpcRequest) returns (SimulateCreatureRpcResponse);
    rpc SimulateCreaturesRpc (SimulateCreaturesRpcRequest) returns (SimulateCreaturesRpcResponse);
    rpc NaturallySelectCreatureRpc (NaturallySelectCreatureRpcRequest) returns (NaturallySelectCreatureRpcResponse);
    rpc NaturallySelectCreaturesRpc (NaturallySelectCreaturesRpcRequest) returns (NaturallySelectCreaturesRpcResponse);
    rpc KillFailedCreatureRpc (KillFailedCreatureRpcRequest) returns (KillFailedCreatureRpcResponse);
    rpc KillFailedCreaturesRpc (KillFailedCreaturesRpcRequest) returns (KillFailedCreaturesRpcResponse);
    rpc ReproduceSuccessfulCreatureRpc (ReproduceSuccessfulCreatureRpcRequest) returns (ReproduceSuccessfulCreatureRpcResponse);
    rpc ReproduceSuccessfulCreaturesRpc (ReproduceSuccessfulCreaturesRpcRequest) returns (ReproduceSuccessfulCreaturesRpcResponse);
}
// GenerateCreatureRpc request/response Models
message GenerateCreatureRpcRequest {
}
message GenerateCreatureRpcResponse {
    CreatureMessage creatureMessage = 1;
}
// GenerateCreaturesRpc request/response Models
message GenerateCreaturesRpcRequest {
    int64 quantity = 1;
}
message GenerateCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// SimulateCreatureRpc request/response Models
message SimulateCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
}
message SimulateCreatureRpcResponse {
    CreatureMessage creatureMessage = 1;
}
// SimulateCreaturesRpc request/response Models
message SimulateCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
}
message SimulateCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// NaturallySelectCreatureRpc request/response Models
message NaturallySelectCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
}
message NaturallySelectCreatureRpcResponse {
    CreatureMessage creatureMessage = 1;
}
// NaturallySelectCreaturesRpc request/response Models
message NaturallySelectCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
}
message NaturallySelectCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// KillFailedCreatureRpc request/response Models
message KillFailedCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
}
message KillFailedCreatureRpcResponse {
}
// KillFailedCreaturesRpc request/response Models
message KillFailedCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
}
message KillFailedCreaturesRpcResponse {
}
// ReproduceSuccessfulCreatureRpc request/response Models
message ReproduceSuccessfulCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
}
message ReproduceSuccessfulCreatureRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// ReproduceSuccessfulCreaturesRpc request/response Models
message ReproduceSuccessfulCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
}
message ReproduceSuccessfulCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}