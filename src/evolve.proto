syntax = "proto3";
package evolve;
option go_package = "pb";

////////// MODELS //////////

// Protobuf compliant model of an individual Creature.
message CreatureMessage {
    string name = 1; // Creatures name.
    int64 generation = 2; // Generation counter for this branch of creatures.
    double speed = 3; // Speed attribute.
    double stamina = 4; // Stamina attirbute.
    double health = 5; // Health attribute.
    double greed = 6; // Greed attribute.
    double fitnessValue = 7; // How fit this creature is based on the simulation.
    bool simulatedThisGeneration = 8; // Flag for if this creature has already been simulated.
    string outcome = 9; // Outcome (enum) of natural selection. TODO: Rename.
    bool naturallySelectedThisGeneration = 10; // Flag for if this creature has already been naturally selected.
    int64 fitnessIndex = 11; // Where the creature ranks amongst its peers. Should be used in conjunction with a population message.
}

// Information about a generation of creatures (deemed a "population").
message PopulationMessage {
    int64 size = 1; // The size of the population of creatures for this generation.
    int64 carryingCapacity = 2;
}

////////// SERVICES //////////

// Creature Service
service CreatureService {
    rpc GenerateCreatureRpc (GenerateCreatureRpcRequest) returns (GenerateCreatureRpcResponse);
    rpc GenerateCreaturesRpc (GenerateCreaturesRpcRequest) returns (GenerateCreaturesRpcResponse);
    rpc SimulateCreatureRpc (SimulateCreatureRpcRequest) returns (SimulateCreatureRpcResponse);
    rpc SimulateCreaturesRpc (SimulateCreaturesRpcRequest) returns (SimulateCreaturesRpcResponse);
    rpc NaturallySelectCreatureRpc (NaturallySelectCreatureRpcRequest) returns (NaturallySelectCreatureRpcResponse);
    rpc NaturallySelectCreaturesRpc (NaturallySelectCreaturesRpcRequest) returns (NaturallySelectCreaturesRpcResponse);
    rpc KillFailedCreatureRpc (KillFailedCreatureRpcRequest) returns (KillFailedCreatureRpcResponse);
    rpc KillFailedCreaturesRpc (KillFailedCreaturesRpcRequest) returns (KillFailedCreaturesRpcResponse);
    rpc ReproduceSuccessfulCreatureRpc (ReproduceSuccessfulCreatureRpcRequest) returns (ReproduceSuccessfulCreatureRpcResponse);
    rpc ReproduceSuccessfulCreaturesRpc (ReproduceSuccessfulCreaturesRpcRequest) returns (ReproduceSuccessfulCreaturesRpcResponse);
}
// GenerateCreatureRpc request/response Models
message GenerateCreatureRpcRequest {
}
message GenerateCreatureRpcResponse {
    CreatureMessage creatureMessage = 1;
}
// GenerateCreaturesRpc request/response Models
message GenerateCreaturesRpcRequest {
    int64 quantity = 1;
}
message GenerateCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// SimulateCreatureRpc request/response Models
message SimulateCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
}
message SimulateCreatureRpcResponse {
    CreatureMessage creatureMessage = 1;
}
// SimulateCreaturesRpc request/response Models
message SimulateCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
}
message SimulateCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// NaturallySelectCreatureRpc request/response Models
message NaturallySelectCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
    PopulationMessage populationMessage = 2;
}
message NaturallySelectCreatureRpcResponse {
    CreatureMessage creatureMessage = 1;
}
// NaturallySelectCreaturesRpc request/response Models
message NaturallySelectCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
    PopulationMessage populationMessage = 2;
}
message NaturallySelectCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// KillFailedCreatureRpc request/response Models
message KillFailedCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
}
message KillFailedCreatureRpcResponse {
}
// KillFailedCreaturesRpc request/response Models
message KillFailedCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
}
message KillFailedCreaturesRpcResponse {
}
// ReproduceSuccessfulCreatureRpc request/response Models
message ReproduceSuccessfulCreatureRpcRequest {
    CreatureMessage creatureMessage = 1;
}
message ReproduceSuccessfulCreatureRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}
// ReproduceSuccessfulCreaturesRpc request/response Models
message ReproduceSuccessfulCreaturesRpcRequest {
    repeated CreatureMessage creatureMessages = 1;
}
message ReproduceSuccessfulCreaturesRpcResponse {
    repeated CreatureMessage creatureMessages = 1;
}